TebLocalPlannerROS:

 odom_topic: odom

  #*******************************************************************************
  # Trajectory
  #*******************************************************************************
  teb_autosize: 1.0                             #是否自动调整轨迹大小。根据时间分辨率自动调整轨迹大小
  dt_ref: 0.2                                   #轨迹的期望时间分辨率（应该与底层控制速率的数量级相符）
  dt_hysteresis: 0.02                           #自动调整大小的滞后（根据当前时间分辨率 dt）：通常为 dt_ref 的 10%
  max_samples: 500                              #最大样本数量；警告：如果太小，离散化/分辨率可能不足以用于给定的机器人模型，或者避障不再有效。
  global_plan_overwrite_orientation: True       #覆盖全局规划器提供的局部子目标的方向
  allow_init_with_backwards_motion: True        #如果为真，基础轨迹可能会以后退运动初始化，以防目标在本地代价地图中位于起点之后（仅当机器人配备后部传感器时推荐）
  max_global_plan_lookahead_dist: 7.0           #指定用于优化考虑的全局规划子集的最大长度（累积欧氏距离）[如果 <=0：禁用；长度也受到本地代价地图大小的限制！
  force_reinit_new_goal_dist: 1.0               #如果之前的目标更新距离超过此值，则强制规划器重新初始化轨迹
  force_reinit_new_goal_angular: 0.78           #如果之前的目标更新的角度超过此弧度值，则强制规划器重新初始化轨迹
  feasibility_check_no_poses: 0                 #在预测路径上，每个采样间隔需要检查可行性的姿态数目
  feasibility_check_lookahead_distance: 7.0     #每个采样间隔需要检查可行性的距离（以及feasibility_check_no_poses之下的索引）与机器人之间的距离。-1检查所有姿势，直到feasibility_check_no_poses。https://robotics.stackexchange.com/questions/80845/what-are-reasons-for-teb-planners-feasibility-check-to-fail
  exact_arc_length: False                       #如果为真，规划器在速度、加速度和转向率计算中使用准确的弧长 [-> 增加 CPU 时间]，否则使用欧氏近似。
  publish_feedback: False                       #发布包含完整轨迹和活动障碍物列表的规划器反馈（应仅用于评估或调试目的）
  visualize_with_time_as_z_axis_scale: 0.0      #在rviz里可看到优化使用的graph


 # Robot

 max_vel_x: 1.0
 max_vel_x_backwards: 1.0
 max_vel_y: 1.0
 max_vel_theta: 0.0
 acc_lim_x: 2.0
 acc_lim_theta: 1.5
 min_turning_radius: 0.0 # diff-drive robot (can turn on place!)
transform_tolerance: 0.5 
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
  #  type: "line"
  #  radius: 0.36 # for type "circular"
  #  line_start: [0.0, 0.0] # for type "line"
  #  line_end: [0.2, 0.0] # for type "line"
  #  front_offset: 0.2 # for type "two_circles"
  #  front_radius: 0.2 # for type "two_circles"
  #  rear_offset: 0.0 # for type "two_circles"
  #  rear_radius: 0.2 # for type "two_circles"
  #  vertices: [[0.3, 0.2], [-0.1, 0.2], [-0.1, -0.2], [0.3, -0.2]] # for type "polygon"
    type: polygon
    vertices: [[-0.334, -0.448], [-0.334, 0.448],[0.334,0.448],[0.334, -0.448]]
 # GoalTolerance

 xy_goal_tolerance: 0.3
 yaw_goal_tolerance: 360.0
 free_goal_vel: false
 complete_global_plan: True

  #*******************************************************************************
  # Obstacles 障碍物
  #*******************************************************************************
  min_obstacle_dist: 0.25                     #机器人与障碍物之间最小的期望间隔距离
  inflation_dist: 0.6                         #障碍物周围的缓冲区，用于增加安全裕度。此缓冲区内具有非零的惩罚代价
  dynamic_obstacle_inflation_dist: 0.5        #具有非零惩罚成本的动态障碍物预测位置周围的缓冲区（应大于min_obstacle_dist才能生效)
  include_dynamic_obstacles: True             #预测动态障碍物周围的缓冲区，用于增加安全裕度。此缓冲区内具有非零的惩罚代价
  include_costmap_obstacles: True             #是否直接考虑代价地图中的障碍物 (如果没有单独的聚类和检测功能，则需要此选项)
  legacy_obstacle_association: False          #如果为真，则使用旧的关联策略 (为每个障碍物找到最近的 TEB 姿势)，否则使用新的关联策略 (为每个 TEB 姿势仅找到“相关”障碍物)
  costmap_obstacles_behind_robot_dist: 1.0    #限制规划时考虑的占据局部代价地图障碍物 (指定距离，米)。该值仅对机器人后方的障碍物生效。
  obstacle_poses_affected: 25                 #为了减少计算量，障碍物位置会附加到轨迹上最近的姿态上，但也会考虑一定数量的相邻姿态。


# 权重参数
  obstacle_cost_exponent: 4.0
  weight_max_vel_x: 2.0                   #满足最大允许平移速度的权重
  weight_max_vel_y: 2.0                   #满足最大允许横移速度的权重 (仅用于全向移动机器人)
  weight_max_vel_theta: 1.0               #满足最大允许角速度的权重
  weight_acc_lim_x: 0.5                   #满足最大允许平移加速度的权重
  weight_acc_lim_y: 0.7                   #满足最大允许横移加速度的权重 (仅用于全向移动机器人)
  weight_acc_lim_theta: 1.0               #满足最大允许角加速度的权重
  weight_kinematics_nh: 1.0               #满足非全向运动学约束的权重
  weight_kinematics_forward_drive: 1.0    #强制机器人仅选择向前运动方向的权重 (仅用于差分驱动机器人)
  weight_kinematics_turning_radius: 1.0   #强制最小转弯半径（小车型机器人）的优化权重
  weight_optimaltime: 1.0                 #优化轨迹并尽量缩短运动时间的权重，确保在规定的时间内到达目标
  weight_shortest_path: 0.0               #倾向于选择更短的路径，路径可能更加弯曲或不平坦
  weight_obstacle: 100.0                  #与障碍物保持最小距离的权重
  weight_inflation: 0.2                   #优化轨迹并尽量避免膨胀区域的权重 (权重应设置较小)
  weight_dynamic_obstacle: 10.0           #与动态障碍物保持最小距离的权重
  weight_dynamic_obstacle_inflation: 0.2  #优化轨迹并尽量避免动态障碍物膨胀区域的权重 (权重应设置较小)
  weight_viapoint: 1.0                    #一些特定的权重 (例如 weight_obstacle) 会在外循环每次迭代中乘以该因子进行调整。这样逐步增加权重比直接设置较高的权重值可以改善优化问题的数值条件
  weight_adapt_factor: 2.0                #非线性障碍物代价的指数 (cost = linear_cost * obstacle_cost_exponent)。设置为 1 则禁用非线性代价 (默认值)

#*******************************************************************************
  # Homotopy Class Planner
  #*******************************************************************************
  enable_homotopy_class_planning: False
  enable_multithreading: True            #是否启用多线程并行规划多个路径
  max_number_classes: 3                  #允许探索的最大替代拓扑类别数 (会增加计算量)
  selection_cost_hysteresis: 1.0
  selection_prefer_initial_plan: 1.0
  selection_obst_cost_scale: 1.0
  selection_alternative_time_cost: True

  roadmap_graph_no_samples: 15          #指定为创建路线图而生成的样本数
  roadmap_graph_area_width: 5.0         #指定该区域的宽度
  roadmap_graph_area_length_scale: 1.0  #矩形区域的长度由起点和终点之间的距离决定。该参数会进一步缩放距离，使几何中心保持不变
  h_signature_prescaler: 0.5            #（0.2 < value <= 1）缩放用于区分同伦类的内部参数
  h_signature_threshold: 0.1            #如果实部和复部的差都低于规定的阈值，则假定两个h签名相等。
  obstacle_heading_threshold: 0.45      #为了将障碍物纳入探索范围，需要指定障碍物朝向和目标朝向的归一化点积的阈值
  switching_blocking_period: 0.0        #指定允许切换到新的等效类之前需要终止的持续时间
  viapoints_all_candidates: True        #若为真，则所有不同拓扑结构的路径都会附加到路径点集合上，否则只会附加与初始/全局计划共享相同路径点的路径 (在测试优化节点中没有效果)
  delete_detours_backwards: True 
  max_ratio_detours_duration_best_duration: 3.0
  visualize_hc_graph: False             #可视化用于探索新拓扑类的图

  #*******************************************************************************
  # Recovery
  #*******************************************************************************
  #当规划器检测到系统异常，允许缩小时域规划范围,TEB将以更近的点作为规划目标，尝试重新规划出可行路径;
  shrink_horizon_backup: True         
  shrink_horizon_min_duration: 10.0         #如果检测到不可行的轨迹，激活缩小的水平线后备模式，本参数为其最短持续时间。
  oscillation_recovery: True                #尝试检测和解决振荡
  oscillation_v_eps: 0.1                    #(0,1)内的 normalized 线速度的平均值的阈值，判断机器人是否运动异常
  oscillation_omega_eps: 0.1                #(0,1)内的 normalized 角速度的平均值，判断机器人是否运动异常
  oscillation_recovery_min_duration: 10.0   #在这个时间内，是否再次发生FailureDetector检测的振荡
  oscillation_filter_duration: 10.0         #failure_detector_中buffer容器的大小为oscillation_filter_duration * controller_frequency
